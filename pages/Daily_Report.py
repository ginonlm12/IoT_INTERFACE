import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
from db_connect import get_statistics_by_date, analyze_on_time
import calendar

# Thi·∫øt l·∫≠p giao di·ªán Streamlit
st.set_page_config(
    page_title="Smart Home Dashboard",
    page_icon="üìä",
    layout="wide"
)

st.title("üìä Smart Home Report")
st.write("B√°o c√°o chi ti·∫øt h·ªá th·ªëng nh√† th√¥ng minh.")

# Sidebar: L·ª±a ch·ªçn ch·∫ø ƒë·ªô b√°o c√°o
report_mode = st.sidebar.radio(
    "Ch·ªçn ch·∫ø ƒë·ªô b√°o c√°o:",
    options=["Daily Report", "Monthly Report"]
)

if report_mode == "Daily Report":
    # L·ª±a ch·ªçn ng√†y
    st.sidebar.header("L·ª±a ch·ªçn ng√†y")
    date_input = st.sidebar.date_input("Ch·ªçn ng√†y", datetime.today())

    # Chuy·ªÉn ƒë·ªïi ng√†y nh·∫≠p th√†nh string
    if not date_input:
        date_input = datetime.today()
    date_str = date_input.strftime("%Y-%m-%d")

    # L·∫•y d·ªØ li·ªáu th·ªëng k√™
    # print(date_str)
    # print("----")
    statistics_df = get_statistics_by_date(date_str)
    # print("----")
    # print("fan:", statistics_df['fan_on_time'].iloc[0])
    fan_total, fan_power, fan_max_continuous = analyze_on_time(statistics_df['fan_on_time'].iloc[0], "fan")
    # print("led:", statistics_df['led_on_time'].iloc[0])
    led_total, led_power, led_max_continuous = analyze_on_time(statistics_df['led_on_time'].iloc[0], "led")
    #print('statistics_df:', statistics_df)

    if statistics_df is None or statistics_df.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o cho ng√†y ƒë∆∞·ª£c ch·ªçn.")
    else:
        # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ b√°o c√°o
        st.header(f"üìä B√°o C√°o Th·ªëng K√™ Ng√†y {statistics_df.loc[0, 'timestamp']}")

        # Gi√° tr·ªã trung b√¨nh
        st.subheader("üìà Gi√° Tr·ªã Trung B√¨nh")
        st.table(statistics_df[["mean_light", "mean_temp"]].rename(columns={
            "mean_light": "√Ånh S√°ng Trung B√¨nh",
            "mean_temp": "Nhi·ªát ƒê·ªô Trung B√¨nh"
        }))

        # Gi√° tr·ªã c·ª±c ƒë·∫°i v√† c·ª±c ti·ªÉu
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìâ Gi√° Tr·ªã Nh·ªè Nh·∫•t")
            st.table(statistics_df[["min_light", "min_temp"]].rename(columns={
                "min_light": "√Ånh S√°ng Nh·ªè Nh·∫•t",
                "min_temp": "Nhi·ªát ƒê·ªô Nh·ªè Nh·∫•t"
            }))
        with col2:
            st.subheader("üìà Gi√° Tr·ªã L·ªõn Nh·∫•t")
            st.table(statistics_df[["max_light", "max_temp"]].rename(columns={
                "max_light": "√Ånh S√°ng L·ªõn Nh·∫•t",
                "max_temp": "Nhi·ªát ƒê·ªô L·ªõn Nh·∫•t"
            }))

        # Thay ƒë·ªïi l·ªõn nh·∫•t
        st.subheader("üîÑ Thay ƒê·ªïi L·ªõn Nh·∫•t Trong Ng√†y")
        st.table(statistics_df[["max_change_light", "max_change_temp"]].rename(columns={
            "max_change_light": "Thay ƒê·ªïi √Ånh S√°ng L·ªõn Nh·∫•t",
            "max_change_temp": "Thay ƒê·ªïi Nhi·ªát ƒê·ªô L·ªõn Nh·∫•t"
        }))

        # Ph√¢n t√≠ch d·ªØ li·ªáu
        st.subheader("üìã Ph√¢n T√≠ch D·ªØ Li·ªáu")
        analysis = []
        if statistics_df["mean_temp"].iloc[0] > 28:
            analysis.append("Nhi·ªát ƒë·ªô trung b√¨nh cao, c√≥ th·ªÉ c·∫ßn ki·ªÉm tra h·ªá th·ªëng l√†m m√°t.")
        elif statistics_df["mean_temp"].iloc[0] < 22:
            analysis.append("Nhi·ªát ƒë·ªô trung b√¨nh th·∫•p, c√≥ th·ªÉ c·∫ßn tƒÉng nhi·ªát ƒë·ªô ƒë·ªÉ ƒë·∫£m b·∫£o m√¥i tr∆∞·ªùng tho·∫£i m√°i.")
        else:
            analysis.append("Nhi·ªát ƒë·ªô trung b√¨nh ·ªïn ƒë·ªãnh, ph√π h·ª£p v·ªõi m√¥i tr∆∞·ªùng s·ªëng.")

        if statistics_df["max_change_light"].iloc[0] > 50:
            analysis.append("√Ånh s√°ng thay ƒë·ªïi l·ªõn trong ng√†y, c√≥ th·ªÉ do m√¥i tr∆∞·ªùng b√™n ngo√†i ho·∫∑c ƒëi·ªÅu ch·ªânh th·ªß c√¥ng.")
        else:
            analysis.append("√Ånh s√°ng thay ƒë·ªïi √≠t, m√¥i tr∆∞·ªùng √°nh s√°ng ·ªïn ƒë·ªãnh.")

        for item in analysis:
            st.markdown(f"- {item}")
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.subheader("‚è±Ô∏è Th·ªùi gian b·∫≠t thi·∫øt b·ªã v√† c√¥ng su·∫•t ti√™u th·ª•")

    # Hi·ªÉn th·ªã th√¥ng tin cho Qu·∫°t
    st.write(f"- **T·ªïng th·ªùi gian b·∫≠t qu·∫°t:** {fan_total} gi√¢y")
    st.write(f"- **∆Ø·ªõc t√≠nh c√¥ng su·∫•t qu·∫°t:** {fan_power} Wh")
    st.write(f"- **Th·ªùi gian b·∫≠t qu·∫°t li√™n t·ª•c l√¢u nh·∫•t:** {fan_max_continuous} gi√¢y")

    # Hi·ªÉn th·ªã th√¥ng tin cho ƒê√®n
    st.write(f"- **T·ªïng th·ªùi gian b·∫≠t ƒë√®n:** {led_total} gi√¢y")
    st.write(f"- **∆Ø·ªõc t√≠nh c√¥ng su·∫•t ƒë√®n:** {led_power} Wh")
    st.write(f"- **Th·ªùi gian b·∫≠t ƒë√®n li√™n t·ª•c l√¢u nh·∫•t:** {led_max_continuous} gi√¢y")

elif report_mode == "Monthly Report":
    # L·ª±a ch·ªçn th√°ng
    st.sidebar.header("L·ª±a ch·ªçn th√°ng")
    month_input = st.sidebar.date_input("Ch·ªçn th√°ng", datetime.today())
    
    if not month_input:
        month_input = datetime.today()

    # L·∫•y chu·ªói ng√†y th√°ng nƒÉm theo ƒë·ªãnh d·∫°ng "%Y-%m" (v√≠ d·ª•: "2025-01")
    month_str = month_input.strftime("%Y-%m")

# T·∫°o start_month t·ª´ ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng
    start_month = datetime.strptime(month_str + "-01", "%Y-%m-%d")

    # X√°c ƒë·ªãnh ng√†y cu·ªëi c·ªßa th√°ng
    if start_month.month == 12:
        # N·∫øu th√°ng l√† th√°ng 12, chuy·ªÉn sang th√°ng 1 c·ªßa nƒÉm sau
        end_month = start_month.replace(year=start_month.year + 1, month=1, day=1) - timedelta(seconds=1)
    else:
        # N·∫øu kh√¥ng ph·∫£i th√°ng 12, c·ªông 1 th√°ng
        end_month = start_month.replace(month=start_month.month + 1, day=1) - timedelta(seconds=1)

    # L·∫•y danh s√°ch c√°c ng√†y trong th√°ng
    days_in_month = pd.date_range(start=start_month, end=end_month, freq='D').strftime('%Y-%m-%d').tolist()

    # T·∫°o danh s√°ch ƒë·ªÉ ch·ª©a d·ªØ li·ªáu
    statistics_list = []

    # L·∫•y d·ªØ li·ªáu cho t·∫•t c·∫£ c√°c ng√†y trong th√°ng
    for day in days_in_month:
        statistics_df = get_statistics_by_date(day)
        if statistics_df is not None and not statistics_df.empty:
            statistics_list.append(statistics_df)

    if statistics_list:
        # Chuy·ªÉn danh s√°ch c√°c DataFrame th√†nh m·ªôt DataFrame duy nh·∫•t
        full_month_df = pd.concat(statistics_list)

        # T√≠nh gi√° tr·ªã c·ª±c ƒë·∫°i, c·ª±c ti·ªÉu trong th√°ng cho c√°c tr∆∞·ªùng
        max_data = full_month_df.max()
        min_data = full_month_df.min()

        # T√¨m ng√†y c√≥ gi√° tr·ªã l·ªõn nh·∫•t v√† nh·ªè nh·∫•t
        max_day = full_month_df.loc[full_month_df['mean_light'] == max_data['mean_light']].iloc[0]['timestamp']
        min_day = full_month_df.loc[full_month_df['mean_light'] == min_data['mean_light']].iloc[0]['timestamp']

        # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ b√°o c√°o th√°ng
        st.header(f"üìä B√°o C√°o Th·ªëng K√™ Th√°ng: {month_str}")
        
        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ gi√° tr·ªã c·ª±c ƒë·∫°i v√† c·ª±c ti·ªÉu trong th√°ng
        st.subheader("üìà Gi√° Tr·ªã L·ªõn Nh·∫•t v√† Nh·ªè Nh·∫•t")
        st.markdown(f"- **√Ånh s√°ng l·ªõn nh·∫•t trong th√°ng:** {max_data['mean_light']} v√†o ng√†y {max_day}")
        st.markdown(f"- **√Ånh s√°ng nh·ªè nh·∫•t trong th√°ng:** {min_data['mean_light']} v√†o ng√†y {min_day}")
        st.markdown(f"- **Nhi·ªát ƒë·ªô l·ªõn nh·∫•t trong th√°ng:** {max_data['mean_temp']} v√†o ng√†y {max_day}")
        st.markdown(f"- **Nhi·ªát ƒë·ªô nh·ªè nh·∫•t trong th√°ng:** {min_data['mean_temp']} v√†o ng√†y {min_day}")

        # Th√™m c√°c tr∆∞·ªùng kh√°c t∆∞∆°ng t·ª± nh∆∞ tr√™n
        # V√≠ d·ª•: fan_on_time, led_on_time, v.v.

        # Bi·ªÉu ƒë·ªì th·ªëng k√™
        st.subheader("üìâ Bi·ªÉu ƒê·ªì Th·ªëng K√™ Th√°ng")
        fig = px.line(
            full_month_df,
            x="timestamp",
            y="mean_light",
            title="Bi·ªÉu ƒë·ªì √Ånh S√°ng Trung B√¨nh Trong Th√°ng",
            labels={"timestamp": "Ng√†y", "mean_light": "√Ånh S√°ng Trung B√¨nh"}
        )
        st.plotly_chart(fig, use_container_width=True)

    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o cho th√°ng n√†y.")